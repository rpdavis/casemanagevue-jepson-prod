rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // Define helper functions to improve readability
    function userRole(role) {
      return request.auth.token.role == role;
    }
    function isSuperAdmin() {
      return userRole('admin') || userRole('school_admin');
    }
    function isAnyAdmin() {
      return userRole('admin') || userRole('school_admin') || userRole('admin_504') || userRole('sped_chair');
    }
    function isStaffEdit() {
      return userRole('staff_edit');
    }
    function hasValidRole() {
      return userRole('admin') || userRole('school_admin') || userRole('staff_view') || userRole('staff_edit') || 
             userRole('admin_504') || userRole('sped_chair') || userRole('case_manager') || 
             userRole('teacher') || userRole('service_provider') || userRole('paraeducator');
    }

    // Firestore document getters (cross-service):
    function getStudentDoc(studentId) {
      return firestore.get(
        /databases/(default)/documents/students/$(studentId)
      );
    }
    function studentStaffIds(studentId) {
      return getStudentDoc(studentId).data.app.staffIds;
    }
    function studentPlan(studentId) {
      return getStudentDoc(studentId).data.app.studentData.plan;
    }
    function studentCaseManagerId(studentId) {
      return getStudentDoc(studentId).data.app.studentData.caseManagerId;
    }

    // Match for highly sensitive documents (e.g. IEPs, BIPs, At-A-Glance) stored under a 'sensitive' folder
    match /students/{studentId}/sensitive/{fileName} {
      // All authenticated users with valid roles can read student documents
      // This includes At-A-Glance documents which should be accessible to all staff
      allow read: if request.auth != null && hasValidRole();
      /* 
         All authenticated users with valid roles can read student documents.
         This ensures At-A-Glance documents are accessible to all staff members.
      */

      // Only users with write access on the student can upload or delete files
      allow write: if request.auth != null && (
        isAnyAdmin() ||                                       // all admin roles can manage any files
        isStaffEdit() ||                                      // staff_edit can write all files
        (userRole('case_manager') &&                          // case manager can write if they are this student's case manager
           request.auth.uid == studentCaseManagerId(studentId))
      );
      /*
         Write access (upload/delete) is restricted:
         - Super admins (admin, sped_chair) can always write.
         - A 504 Coordinator (administrator_504_CM) can modify files **only for 504-plan students** (verified via Firestore).
         - A case_manager can modify files for their own student (their UID matches the student's caseManagerId).
         - Other roles (teachers, service_providers, paraeducators, read-only admins) cannot upload/delete student files.
      */
    }

    // Match for less sensitive student files (if any) under a 'general' folder 
    match /students/{studentId}/general/{fileName} {
      // All authenticated users with valid roles can read general student files
      allow read: if request.auth != null && hasValidRole();
      allow write: if request.auth != null && (
        isAnyAdmin() ||
        isStaffEdit() ||
        (userRole('case_manager') && request.auth.uid == studentCaseManagerId(studentId))
      );
    }

    // Match for all other student files (fallback for existing file structure)
    match /students/{studentId}/{filePath=**} {
      // All authenticated users with valid roles can read student files
      allow read: if request.auth != null && hasValidRole();
      allow write: if request.auth != null && (
        isAnyAdmin() ||
        isStaffEdit() ||                                      // staff_edit can upload files
        userRole('case_manager') ||                           // case managers can upload files
        request.auth.uid in studentStaffIds(studentId)       // users in student's staff list can upload
      );
    }

    // Administrative files - only super admins can access
    match /admin/{filePath=**} {
      allow read, write: if request.auth != null && isSuperAdmin();
    }

    // Public assets (if any) - read-only for authenticated users
    match /public/{filePath=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isSuperAdmin();
    }

    // Secure PDF system - encrypted files
    match /encrypted-pdfs/{studentId}/{fileName} {
      // All authenticated users with valid roles can read encrypted PDFs
      allow read: if request.auth != null && hasValidRole();
      
      // Allow write for admins, staff_edit, case managers, and users in student's staff list
      allow write: if request.auth != null && (
        isAnyAdmin() ||                                       // all admin roles can manage any files
        isStaffEdit() ||                                      // staff_edit can upload files
        userRole('case_manager') ||                           // case managers can upload files
        request.auth.uid in studentStaffIds(studentId)       // users in student's staff list can upload
      );
    }
  }
} 